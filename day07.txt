2018     10.15    星期一




tcp套接字传输特征
  1.当一端退出时如果另一端阻塞在recv,此时recv会立即结束
    阻塞返回空字符串
  2.如果另一端不存在则调用send发送时会出现Broken Pipe异常
  3.一个监听套接字可以同时连接多个客户端,也可以重复使用

网络收发缓冲区
  1.减少和磁盘的交互
  2.协调收发速度(数据处理速度)
    send和recv实际是向缓冲区发送,从缓冲区接收

TCP粘包
  产生原因：
    1.tcp以字节流的方式进行数据传输,消息之间没边界
    2.多次发送的消息被一次接收
  影响：
    如果每次发生的内容是一个独立含义的个体此时粘包
    会产生影响
  处理粘包：
    1.将消息结构化
    2.在消息结尾添加结束标志
    3.控制消息发送速度
  只有tcp会产生粘包 

基于UDP套接字的服务端 
  1.创建数据报套接字
    sockfd = socket(AF_INET,SOCK_DGRAM)
  2.绑定地址
    sockfd.bind(addr)
  3.消息收发
    data,addr = sockfd.recvfrom(buffersize)
    功能：接收UDP消息
    参数：每次最多接收多少字节消息
    返回值： data 收到的消息
            addr 消息发送方的地址

    n = sockfd.sendto(data,addr)
    功能：发送UDP消息
    参数：data 要发送的消息 bytes格式
         addr 目标地址
    返回：发送的字节数  
  4.关闭套接字
    sockfd.close()

from socket import * 

# 创建数据报套接字
sockfd=socket(AF_INET,SOCK_DGRAM)

# 绑定地址
server_addr=('0.0.0.0',8888)
sockfd.bind(server_addr)

# 消息收发
while True:
    data,addr=sockfd.recvfrom(1024)
    print("Receive from %s:%s"%(addr,data.decode()))
    sockfd.sendto(b"Thanks for your msg",addr)
# 关闭套接字
sockfd.close()

udp客户端
  1.创建数据报套接字
  2.消息发收
  3.关闭套接字

from socket import * 
import sys

if len(sys.argv)<3:
    print('''
    argv is error!
    run as python3 udp_client.py 127.0.0.1 8888''')
    raise
# 从命令行接收服务器地址
HOST=sys.argv[1]
PORT=int(sys.argv[2])
ADDR=(HOST,PORT)

# 创建数据报套接字
sockfd=socket(AF_INET,SOCK_DGRAM)

# 消息发收
while True:
    data=input("Msg>>")
    if not data:
        break
    sockfd.sendto(data.encode(),ADDR)
    msg,addr=sockfd.recvfrom(1024)
    print("从服务器收到:",msg.decode())
# 关闭套接字
sockfd.close()



获取命令行参数 
  import sys 
  sys.argv 属性获取命令行内容
  将命令行参数以字符串形式收集为一个列
  import sys 
  print(sys.argv)
  python3 udp_client.py hello world
  ['udp_client.py', 'hello', 'world']


tcp套接字和udp的区别
  1.流式套接字是以字节流方式传输数据,数据报则以数据
    报形式传输
  2.tcp传输会有粘包,udp不会
  3.tcp保证传输的可靠性,udp不保证
  4.tcp需要listen accept操作,udp不需要
  5.tcp使用send recv收发消息,udp使用sendto recvfrom

补充函数：
  sendall(data)
  功能 参数 同send
  返回值：
    发送成功返回None  失败得到异常

套接字属性
  sockfd.type   套接字类型
  sockfd.family 套接字地址族类型
  sockfd.getsockname() 获取套接字绑定地址
  sockfd.fileno() 获取套接字对应的文件描述符
    文件描述符：
      系统中每一个IO操作系统都会分配一个整数作为
      编号,该整数即为这个IO操作的文件描述符
    文件描述符是系统识别IO的标志
  sockfd.getpeername() 连接套接字获取连接端地址
  sockfd.setsockopt(level,option,value)
    功能：设置套接字选项,丰富或者修改套接字属性功能
    参数：level    选项类别  SOL_SOCKET
         option   每个选项类别对应的子选项
         value    对选项设置值
    创建套接字后立即设置
  sockfd.getsockopt(level,option)
    功能：获取套接字选项值
    参数：level    选项类别  
         option   每个选项类别对应的子选项
    返回值：获取到的选项值
from socket import *

s=socket()

# 设置端口可以立即重用
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)

# 套接字地址族
print(s.family)
# 套接字类型
print(s.type)
# 获取套接字绑定地址
s.bind(('0.0.0.0',8888))
print(s.getsockname())
# 获取文件描述符
print(s.fileno())

s.listen(3)
c,addr=s.accept()
# 获取连接套接字连接端地址
print(c.getpeername())
# 获取套接字选项值
print(s.getsockopt(SOL_SOCKET,SO_REUSEADDR))

c.recv(1024)
c.close()
s.close()



udp应用之广播
  广播：一点发送,多点接收
  广播地址：每个网段的最大地址为广播地址

设置可以发送接收广播
  s.setsockopt(SOL_SOCKET,SO_BROADCAST,1)

  format()
    功能：通过参数合成字符串
In [1]: s="{} is a {}".format('Tom','boy')
In [2]: s
Out[2]: 'Tom is a boy'

In [3]: s="{1} is a {0}".format('Tom','boy')
In [4]: s
Out[4]: 'boy is a Tom'

In [5]: s="{a} is a {b}".format(a='Tom',b='boy')
In [6]: s
Out[6]: 'Tom is a boy'




TCP应用之http传输
  http协议  超文本传输协议  应用层协议
  用途：网页的获取
       数据的传输
  特点：
    1.应用层协议,传输层选择tcp传输
    2.简单,灵活,很多语言都有http专门接口
    3.无状态协议,协议本身不要求记录传输的数据
    4.http1.1 支持持久连接
网页请求过程：
  1.客户端(浏览器)通过tcp传输发送http请求给服务端
  2.服务端接收到http请求后进行解析
  3.服务端处理具体请求内容,组织响应内容
  4.将响应内容以http响应格式回发给浏览器
  5.浏览器接收响应内容解析展示

http请求  request  
  请求格式 
    请求行：具体的请求类别和请求路径
      格式：GET       /       HTTP/1.1
         请求类别   请求内容     协议版本

        请求类别   每种类别代表要做不同事情
          GET     获取网络资源
          POST    提交一定的信息,得到反馈
          HEAD    只获取响应头
          PUT     更新服务器资源
          DELETE  删除服务器资源
          CONNECT
          TRACE   测试
          OPTIONS 获取服务器性能信息
    请求头：对请求内容的基本描述(键值对)
    (空行)
    请求体：请求参数或者提交内容

作业
  使用tcp完成一个文件的传输,要求可以传输文本文件
  也可以传输图片
  从客户端发给服务端,或者从服务端发给客户端均可
服务端
from socket import *

# 创建套接字
s=socket(AF_INET,SOCK_STREAM)
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(('0.0.0.0',9000))
s.listen(3)
c,addr=s.accept()
print('Connect from',addr) # 客户端地址

# 接收和写文件
f=open('recv.jpg','wb')
while True:
    data=c.recv(1024)
    if not data:
        break
    f.write(data)

f.close()
c.close()
s.close()

客户端
from socket import *

s=socket()
addr=('127.0.0.1',9000)
s.connect(addr)

# 打开文件
f=open('timg.jpg','rb')
# 发送文件
while True:
    data=f.read(1024)
    if not data:
        break
    s.send(data)
    
f.close()
s.close()
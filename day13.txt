2018     10.23     星期二




进程线程的区别和联系
  1.两者都是多任务编程方式,都能够使用计算机的多核
  2.进程的创建和删除消耗的计算机资源比线程要多
  3.进程空间独立,数据互不干扰,有专门的通信方法,而线程
    使用全局变量进行通信
  4.一个进程可以创建多个线程分支,两者之间存在包含关系
  5.多个线程公用进程的资源,在共享资源操作时往往需要同步
    互斥操作
  6.进程线程都在系统中有自己的特有属性标志,如ID,代码段
    命令集等

使用场景
  1.某个任务中并发比较多,此时多线程消耗资源较少
  2.不同的独立的任务模块,用多进程相对空间比较好管理
  3.在通信上考虑可行性,如果数据逻辑复杂需要的同步互斥
    较多,这时使用线程同步互斥可能会容易出错

要求：
  1.进程线程的区别
  2.进程间通信都知道哪些,有什么特点
  3.什么是同步互斥,你在什么情况下使用
  4.给一个情形,分析用进程还是线程为什么
  5.问一些概念及处理方法 僵尸进程 进程状态 线程效率 


网络通信模型
  服务器：
    硬件服务器：
      主机  集群
    软件服务器：
      编写的服务端应用程序,在硬件服务器上运行,提供一定的
      完整后端服务
      httpserver  ----> 处理http请求
      webserver   ----> 网站的后端服务程序
      邮箱服务器    ----> 邮件处理
      ftp服务器    ----> 文件处理
    前端 用户端 客户端 前台应用 
      特征:与用户直接交互,提供给用户使用
      要求:良好的用户体验
    后端 服务端 后台应用
      特征:提供逻辑处理,数据处理
      要求:更高的并发量,更快的处理速度,更强的安全性
    服务器模型：
      服务器的基本结构：
        c/s  客户端服务器模型
        b/s  浏览器服务器模型

  循环服务器模型：
    循环接收客户端请求,处理请求,同一时刻只能处理一个请求
    处理完毕后再处理下一个
    优点：实现简单,占用资源少
    缺点：无法同时处理多个客户端请求
    适用情况：处理的任务可以很快完成,不需要建立并发,udp比
            tcp更适合循环模型
  并发服务器模型：
    能够同时处理多个客户端的请求
    IO并发：io多路复用
      优点：资源消耗少,能同时处理多个IO
      缺点：只能监控IO事件,当多个任务都是CPU计算时 
           无法同时处理
    多进程多线程并发：为每个客户端创建单独的进程或者线程处理
                   客户端请求
      优点：每个客户端都可以长期占有服务器,能使用多核资源处
           理IO或者cpu计算
      缺点：资源消耗较高

多进程并发
  基于fork完成多进程网络并发
    1.创建套接字,绑定,监听
    2.等待接收客户端连接请求  accept
    3.当有新客户端连接时,创建新的进程处理客户端请求
    4.原有进程继续等待其他客户端连接,新的进程处理客
      户端具体请求
    5.如果客户端退出,则销毁对应的进程

服务端
from socket import *
import os,sys

# 客户端处理函数
def client_handle(c):
    print("客户端：",c.getpeername())
    while True:
        data = c.recv(1024)
        if not data:
            break 
        print(data.decode())
        c.send(b'Receive your message')
    c.close()
    sys.exit(0) # 将子进程销毁

# 创建套接字
HOST = '0.0.0.0'
PORT = 8888
ADDR = (HOST,PORT)

s=socket() # tcp套接字
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(ADDR)
s.listen(5)

# 循环等待客户端连接
print("Listen to the port 8888...")
while True:
    try:
        c,addr = s.accept()
    except KeyboardInterrupt:
        sys.exit('退出服务器')
    except Exception as e:
        print('Error:',e)
        continue 

    # 创建新的进程处理客户端请求
    pid = os.fork() 

    # 子进程处理客户端请求
    if pid == 0:
        p = os.fork() # 创建二级子进程处理僵尸进程
        if p == 0:
            s.close()
            client_handle(c) # 客户端处理函数
        else:
            os._exit(0)

    # 父进程或者创建进程失败都继续等待下个客户端连接
    else:
        c.close()
        os.wait() # 等待子进程退出
        continue

客户端
from socket import *

# 创建套接字
sockfd=socket()

# 发起链接
server_addr=('127.0.0.1',8888)
sockfd.connect(server_addr)

# 发收消息
while True:
    data=input('>>')
    if not data:
        break
    sockfd.send(data.encode())
    data=sockfd.recv(1024)
    print("From server:",data.decode())

sockfd.close()



ftp文件服务器
  功能：
    1.服务端和客户端两部分,要求启动服务器后可以有多个客户端
      同时操作
    2.客户端可以查看服务器文件库中有什么文件(文件库只有普通
      文件,不算隐藏文件)
    3.客户端可以选择文件库的文件进行下载,下载到本地
    4.客户端还可以上传本地文件到服务器文件夹(不设权限)
    5.使用print打印一定的格式,作为命令的输入提示界面
  技术分析：
    fork并发  tcp传输
    如何查看一个文件夹中的文件列表  os.listdir()
    如何判断是一个普通文件    os.path.isfile()
  结构设计：
    使用类将功能封装
  工作步骤：
    先搭建网络连接
    设计类
    将功能函数写在类中,逐一实现并测试
  具体功能：
    1.搭建网络连接
      服务端：创建fork并发服务端程序
      客户端：创建套接字,进行网络连接,连接成功后打印命令选项
             界面等待输入命令
    2.设计类
    3.查看文件列表
      客户端:发送请求
            接收服务端确认
            循环接收服务器发来的文件名并打印
      服务端:接收请求
            判断可否执行反馈结果
            发送文件名称
    4.下载文件
      客户端:发送请求 G filename
            接收服务端确认
            接收文件
      服务端:接收请求
            判断文件是否存在,反馈结果
            发送文件
            
服务端
'''
ftp 文件服务器程序
fork server训练
'''

from socket import * 
import os,sys
import time 

class FtpServer(object):
    def __init__(self,connfd):
        self.connfd = connfd
    
    def do_list(self):
        print('执行List')
        # 获取文件列表
        file_list = os.listdir(FILE_PATH)
        if not file_list:
            self.connfd.send('文件库为空').encode()
        else:
            self.connfd.send(b'OK')
            time.sleep(0.1)
        
        files = ''
        for file in file_list:
            if file[0] != '.' and os.path.isfile(FILE_PATH + file):
                files = files + file + '#'
        # 将拼接好的文件名字符串发送给客户端
        self.connfd.sendall(files.encode())
    
    def do_get(self,filename):
        try:
            fd = open(FILE_PATH+filename,'rb')
        except:
            self.connfd.send('文件不存在'.encode())
            return 
        else:
            self.connfd.send(b'OK')
            time.sleep(0.1)
        # 发送文件内容
        while True:
            data = fd.read(1024)
            if not data:
                time.sleep(0.1)
                self.connfd.send(b'##')
                break
            self.connfd.send(data)
        print('文件发送完毕')

    def do_put(self,filename):
        try:
            fd = open(FILE_PATH+filename,'wb')
        except:
            self.connfd.send('上传失败'.encode())
            return
        else:
            self.connfd.send(b'OK')
        # 接收文件
        while True:
            data = self.connfd.recv(1024)
            if data == b'##':
                break
            fd.write(data)
        fd.close()
        print('接收完毕')


# 全局变量设置
HOST = '0.0.0.0'
PORT =  8888
ADDR = (HOST,PORT)
FILE_PATH = '/home/tarena/ftpfile/'

# 创建网络连接
def main():
    # 创建套接字
    sockfd = socket()
    sockfd.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
    sockfd.bind(ADDR)
    sockfd.listen(5)
    print("Listen to the port 8888...")

    while True:
        try:
            connfd,addr = sockfd.accept()
        except KeyboardInterrupt:
            sockfd.close()
            sys.exit('服务器退出')
        except Exception as e:
            print('服务器异常：',e)
            continue
        print('连接用户端：',addr) 

        # 创建子进程
        pid = os.fork()
        if pid == 0:
            p = os.fork()
            if p == 0: # 接收客户端请求
                sockfd.close()
                ftp = FtpServer(connfd)
                while True:
                    data = connfd.recv(1024).decode()
                    
                    if not data or data[0] == 'Q':
                        connfd.close()
                        sys.exit('客户端退出')
                    elif data[0] == 'L':
                        ftp.do_list()
                    elif data[0] == 'G':
                        filename = data.split(' ')[-1]
                        ftp.do_get(filename)
                    elif data[0] == 'P':
                        filename = data.split(' ')[-1]
                        ftp.do_put(filename)
            else:
                os._exit(0)
        else:
            connfd.close()
            os.wait()

if __name__ == '__main__':
    main()


客户端
from socket import *
import sys 
import time 

# 将具体功能实现放在类中
class FtpClient(object):
    def __init__(self,sockfd):
        self.sockfd = sockfd

    def do_list(self):
        self.sockfd.send(b'L') # 发送请求
        # 等待回复
        data = self.sockfd.recv(128).decode()
        if data == 'OK':
            data = self.sockfd.recv(4096).decode()
            files = data.split('#')
            for file in files:
                print(file)
            print('文件列表展示完毕\n')
        else:
            # 无法执行操作
            print(data)
    
    def do_quit(self):
        self.sockfd.send(b'Q')
        self.sockfd.close()
        sys.exit('谢谢使用')

    def do_get(self,filename):
        self.sockfd.send(('G '+filename).encode())
        data = self.sockfd.recv(128).decode()
        if data == 'OK':
            fd = open(filename,'wb')
            while True:
                data = self.sockfd.recv(1024)
                # 接收结束标志
                if data == b'##':
                    break 
                fd.write(data)
            fd.close()
            print('%s下载完毕'%filename)
        else:
            print(data)
    
    def do_put(self,filename):
        try:
            fd = open(filename,'rb')
        except:
            print('没有找到文件')
            return
        self.sockfd.send(('P '+filename).encode())  
        data = self.sockfd.recv(128).decode() 
        if data == 'OK':
            while True:
                data = fd.read(1024)
                if not data:
                    time.sleep(0.1)
                    # 发送文件读取完标志
                    self.sockfd.send(b'##')
                    break
                self.sockfd.send(data)
            fd.close()
            print('%s上传完毕'%filename)
        else:
            print(data)


# 网络连接
def main():
    if len(sys.argv) < 3:
        print('argv is error')
        return
    print(type(sys.argv)) # 列表
    HOST = sys.argv[1]
    PORT = int(sys.argv[2])
    ADDR = (HOST,PORT)

    sockfd = socket()
    try:
        sockfd.connect(ADDR)
    except Exception as e:
        print('连接服务器失败',e)
        return
    
    # 创建对象
    ftp = FtpClient(sockfd)

    while True:
        print('=======命令选项========')
        print('***      list       ***')
        print('***    get file     ***')
        print('***    put file     ***')
        print('***      quit       ***')
        print('=======================\n')

        cmd = input('输入命令>>')
        if cmd.strip() == 'list':
            ftp.do_list()
        elif cmd.strip() == 'quit':
            ftp.do_quit()
        elif cmd[:3] == 'get':
            filename = cmd.split()[-1]
            ftp.do_get(filename)
        elif cmd[:3] == 'put':
            filename = cmd.split()[-1]
            ftp.do_put(filename)
        else:
            print('请输入正确命令')


if __name__ == '__main__':
    main()
  


多线程并发
  基于threading模块
    1.创建套接字,绑定监听
    2.接收客户端请求
    3.创建新的线程处理客户端请求
    4.主线程继续等待其他客户端连接,分支线程处理具体请求
    5.当客户端退出则线程退出

服务端
from socket import * 
from threading import *

HOST = '0.0.0.0'
PORT = 8888
ADDR = (HOST,PORT)

def handler(c):
    print("Connect from",c.getpeername())
    while True:
        data = c.recv(1024)
        if not data:
            break
        print(data.decode())
        c.send(b'Receive')
    c.close()

# 创建套接字
s = socket()
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(ADDR)
s.listen(3)

# 接收客户端请求
while True:
    try:
        c,addr = s.accept()
    except KeyboardInterrupt:
        s.close()
        s.exit('服务器退出')
    except Exception as e:
        print(e)
        continue

    # 创建线程
    t = Thread(target=handler,args=(c,)) 
    t.setDaemon(True) 
    t.start() 

客户端
from socket import *

# 创建套接字
sockfd=socket()

# 发起链接
server_addr=('127.0.0.1',8888)
sockfd.connect(server_addr)

# 发收消息
while True:
    data=input('>>')
    if not data:
        break
    sockfd.send(data.encode())
    data=sockfd.recv(1024)
    print("From server:",data.decode())

sockfd.close()


多进层并发(multiprocessing)

服务端
from socket import * 
from multiprocessing import *
import sys 

HOST = '0.0.0.0'
PORT = 8888
ADDR = (HOST,PORT)

# 客户端处理函数
def handler():
    print("Connect from",c.getpeername())
    while True:
        data = c.recv(1024)
        if not data:
            break
        print(data.decode())
        c.send(b'Receive')
    c.close()
    sys.exit(0)

# 创建套接字
s = socket()
s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
s.bind(ADDR)
s.listen(3)

# 接收客户端请求
while True:
    try:
        c,addr = s.accept()
    except KeyboardInterrupt:
        s.close()
        s.exit('服务器退出')
    except Exception as e:
        print(e)
        continue

    # 创建线程
    p = Process(target=handler) 
    p.daemon(True) 
    p.start() 
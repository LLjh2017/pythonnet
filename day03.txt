2018    10.09     星期二




1.SQL查询
  1.distinct:不显示字段的重复值
  2.示例
    1.三国表中有哪些国家
      select distinct country from sanguo;
    2.三国表中有几个国家
      select count(distinct country) from sanguo;
  3.distinct和from之间所有字段值都相同才会去重
    select distinct country,id from sanguo;
2.查询表记录时做数学运算
  1.运算符: + - * / %
  2.示例
    1.查询表记录时所有英雄攻击力翻倍
      select name,gongji*2 as gongji from sanguo;

2.嵌套查询(子查询)
  1.定义:把内层的查询结果作为外层的查询条件
  2.语法:
    select .. from 表名 where 字段名 运算符(select
    ...)
  3.示例
    1.把攻击值小于平均攻击值的英雄名字和攻击值查出来
      select name,gongji from sanguo
      where gongji<(select avg(gongji) from sanguo);
    2.找出每个国家攻击力最高的英雄的名字和攻击值
      select name,gongji from sanguo 
      where gongji in (select max(gongji) from
      sanguo group by country);
      select name,gongji from sanguo
      where (country,gongji) in(select country,max(
      gongji) from sanguo group by country);
3.多表查询
  1.两种方式
    1.不加where条件(迪卡尔积)
      select ti.name,t2.name from t1,t2;
    2.加where条件
      select 字段名列表 from 表1,表2 where 条件;
    3.示例
      1.查询省,市详细信息
        select sheng.s_name,city.c_name from sheng,city
        where s_id=cfather_id;
      2.查询省,市,县的详细信息
        select sheng.s_name,city.c_name,xian.x_name 
        from sheng,city,xian where s_id=cfather_id
        and xfather_id=c_id;
4.连接查询
  1.内连接(inner join)
    1.语法格式
      select ... from 表1 inner join 表2 on 条件
      inner join 表3 on 条件...;
    2.示例
      1.查找省,市详细信息 
        select sheng.s_name,city.c_name from sheng
        inner join city on sheng.s_id=city.cfather_id;
      2.查找省市县详细信息
        select sheng.s_name,city.c_name,xian.x_name 
        from sheng inner join city on 
        sheng.s_id=city.cfather_id inner join xian
        on city.c_id=xian.xfather_id;
  2.外连接
    1.左连接(left join)
      1.以左表为主显示查询结果
        select sheng.s_name,city.c_name from sheng
        left join city on s_id=cfather_id;
    2.右连接(right join)
      select sheng.s_name,city.c_name from sheng
      right join city on s_id=cfather_id;
5.约束
  1.非空约束(not null)
    1.不允许该字段的值为NULL
      ## name varchar(20) not null 
  2.默认约束(default)
    1.插入记录时,不给该字段赋值,则使用默认值
      alter table t1 modify sex enum('m','s','f')
      not null default 's';
6.索引
  1.定义
    对数据库表的一列或者多列的值进行排序的一种
    结构(BTree方式)
  2.优点
    加快数据的检索数度
  3.缺点
    1.占用物理存储空间
    2.当对表中数据更新时,索引需要动态维护,占用
      系统资源,降低数据维护速度
  4.索引示例
    1.开启运行时间检测
      show variables like "profiling";
      set profiling=1;
      show variables like "profiling";
    2.执行查询语句(没有索引)
      select name from t1 where name="lucy88888";
    3.在name字段创建索引
      create index name on t1(name);
    4.再执行查询语句(有索引)
      select name from t1 where name="lucy88888";
    5.对比执行时间
      show profiles;
7.索引分类
  1.普通索引(index) && 唯一索引(unique)
    1.使用规则
      1.可设置多个字段
      2.约束 
        普通索引:无约束 key标志:MUL
        唯一索引:字段值不允许重复,可为NULL key标志:UNI
      3.把经常用来查询的字段设置为索引字段
    2.创建表创建
      create table t1(
      id int not null,
      name varchar(20),
      age tinyint,
      phnumber char(18),
      cardnumber char(11),
      index(name),
      index(age),
      unique(phnumber),
      unique(cardnumber)
      );
    3.已有表创建
      create [unique] index 索引名 on 表名(字段名);
    4.查看索引
      1.desc 表名;  --->key标志
      2.show index from 表名\G;
    5.删除索引
      drop index 索引名 on 表名;
  2.主键(primary key) && 自增长(auto_increment)
    1.使用规则
      1.只能有1个字段
      2.约束:字段值不允许重复,且不能为NULL
      3.KEY标志: PRI 
      4.通常设置编号id为主键,能唯一锁定1条记录
    2.创建表时创建
      create table 表名(
      id int primary key auto_increment,
      ...
      );
    3.已有表创建
      alter table 表名 add primary key(id);
      
      create table t3( 
      id int primary key auto_increment,
      name varchar(20)
      )auto_increment=10000,charset=utf8;
    4.删除主键
      1.先删除自增长
        alter table 表名 modify id int;
      2.删除主键 
        alter table 表名 drop primary key;
  3.外键(foreign key)
    1.定义
      让当前表字段的值在另一个表的范围内选择
    2.语法
      foreign key(参考字段名)
      references 主表(被参考字段名)
      on delete 级联动作
      on update 级联动作
    3.使用规则
      1.主表,从表字段数据类型要一致
      2.主表被参考字段:主键
    4.示例
      1.缴费信息表(财务)
        create table jftab(
        id int primary key,
        name varchar(20) not null,
        class char(5) default 'aid',
        money smallint);
        insert into jftab values
        (1,"唐白虎","aid08",300),
        (2,"点秋香","aid08",200);
      2.学生信息表(班主任)
        stu_id 姓名 缴费金额
        create table bjtab(
        stu_id int,
        name varchar(15),
        money smallint,
        foreign key(stu_id) references jftab(id)
        on delete cascade
        on update cascade
        );
    5.删除 
      1.查看外键名
        show create table bjtab;
      2.删除外键
        alter table 表名 drop foreign key 外键名;
    6.在已有表中删除外键
      alter table bjtab add foreign key(stu_id)
      references jftab(id)
      on delete set null
      on update set null;
    7.级联动作
      1.cascade 
        数据级联删除,更新(参考字段)
      2.set null
        从表有相关联记录,字段值设置为NULL
      3.restrict(默认)
        从表有相关联记录,不让主表删除,更新
  
  
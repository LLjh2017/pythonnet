2018       11.05      星期一




什么是项目
  软件项目：
    一个具有完整的功能的代码集合
  接口(API)：
    函数,类,模块都可能是接口,提供的具有一定功能的代码
    通过获取数据返回相应的的结果

软件项目开发流程
  需求分析 --> 概要设计 --> 项目规划 --> 详细设计 -->
  编码测试 --> 项目测试 --> 项目发布 --> 后期维护

  需求分析：确定用户真实需求,做项目评估
    1.确定用户真实需求,项目的基本功能
    2.对项目整体进行评估 (可行性,难度等)
    3.完成需求分析文档,用户确认

  概要设计：对项目进行整体设计,技术分析
    1.确定功能结构
    2.进行技术分析,构建整体框架图
    3.确定技术思路和使用技术
    4.完成概要设计文档,直到开发流程

  项目规划：确定开发的时间轴和流程
    1.确定开发的先后顺序
    2.确定时间轴,里程碑事件
    3.人员的分工
    4.形成甘特图和思维导图,设定计划

  详细设计：项目的具体实现手册
    1.详细记录项目的思路,逻辑,功能,技术点,代码说明
      数据结构等等

  编码测试：按照计划编写功能代码,做基本测试
    1.写代码,测代码
    2.技术攻关

  项目测试：对项目进行整体测试,调整修改
    1.做项目的各种功能和逻辑测试
    2.完成测试报告
    3.进行项目修改
    
  项目发布
    1.交付用户进行使用
    2.编写说明文档 

  后期维护
    1.bug的修改
    2.产品的升级

项目注意事项
  1.按照规定时间完成项目
  2.项目中的人员和技术冲突

项目工具的推荐
  文档编写：word ppt excel markdown LaTex 
  项目流程图：Mindmanager visio 
  项目管理工具：project
  代码管理：git svn 



HTTPServer  v3.0
  httpserver + WebFrame
  httpserver 功能：
    1.获取http请求
    2.解析http请求
    3.将请求内容发送给WebFrame
    4.从WebFrame接收返回数据
    5.将数据组织为Response格式发送给客户端
  WebFrame功能：
    1.从httpserver接收具体请求
    2.判断请求网页或者数据,根据请求调用函数处理
    3.将网页或者数据发送给httpserver
  升级点：
    1.采用了httpserver与应用程序分离,两个功能模块独立,降低
      了耦合度
    2.数据的处理单独调用函数完成
    3.两者的配合使用进程间通信

HTTPServer.py
# conding=utf-8
'''
aid httpserver v3.0
'''
from socket import *
import sys 
from threading import Thread
# 导入配置文件
from settings import *
import re
import time

# 和WebFrame通信
def connect_frame(METHOD,PATH_INFO):
    s = socket()
    # 连接框架服务器地址
    try:    
        s.connect(frame_address) 
    except Exception as e:
        print("Connet error",e)
        return
    s.send(METHOD.encode())
    time.sleep(0.1)
    s.send(PATH_INFO.encode())
    response = s.recv(4096).decode()
    if not response:
        response = '404'
    s.close()
    return response

# 封装httpserver类
class HTTPServer(object):
    def __init__(self,address):
        self.address = address
        self.create_socket()
        self.bind(address)

    # 创建套接字
    def create_socket(self):
        self.sockfd = socket()
        # 设置端口重用
        self.sockfd.setsockopt(\
            SOL_SOCKET,SO_REUSEADDR,1)

    # 绑定地址
    def bind(self,address):
        self.ip = address[0]
        self.port = address[1]
        self.sockfd.bind(address)
    
    # 启动服务器
    def serve_forever(self):
        self.sockfd.listen(10)
        print("Listen the port %d..."%self.port)
        while True:
            connfd,addr = self.sockfd.accept()
            # 创建线程处理客户端请求
            handle_client = Thread(target=self.handle,args=(connfd,))
            handle_client.setDaemon(True)
            handle_client.start()
    
    # 处理具体的客户端请求
    def handle(self,connfd):
        # 接收浏览器发来的http请求
        request = connfd.recv(4096)
        if not request:
            connfd.close()
            return
        request_lines = request.splitlines()
        # 获取请求行
        request_line = request_lines[0].decode('utf-8')
        print(request_line)
        
        pattern = r'(?P<METHOD>[A-Z]+)\s+(?P<PATH_INFO>/\S*)'
        try:
            env = re.match(pattern,request_line).groupdict()
            print(env)
        except:
            response_headlers="HTTP/1.1 500 SERVER ERROR\r\n"
            response_headlers+='\r\n'
            response_body = 'Server Error'
            response=response_headlers+response_body
            connfd.send(response.encode())
            connfd.close()
            return 
        
        response = connect_frame(**env)
        if response == '404':
            response_headlers="HTTP/1.1 404 Not Found\r\n"
            response_headlers+='\r\n'
            response_body = '===Sorry,not found the page==='
        else:
            response_headlers="HTTP/1.1 200 OK\r\n"
            response_headlers+='\r\n'
            response_body = response
        
        response = response_headlers+response_body
        connfd.send(response.encode())
        connfd.close()
           

if __name__ =="__main__":
    httpd = HTTPServer(ADDR)
    httpd.serve_forever() # 启动HTTP服务



settings.py
# httpserver 相关配置
# http server IP
HOST = '0.0.0.0'
PORT = 8000
ADDR = (HOST,PORT)

# 配合框架的ip地址
frame_ip = '127.0.0.1'
frame_port = 8080
frame_address = (frame_ip,frame_port)



WebFrame.py
#coding=utf-8
'''
模拟框架程序部分
'''
from socket import *
from views import *

frame_ip = '127.0.0.1'
frame_port = 8080
frame_address = (frame_ip,frame_port)

# 静态网页位置
STATIC_DIR = './static'
# url决定我们能处理什么数据
urls = [
    ('/time',show_time),
    ('/hello',say_hello),
    ('/bye',say_bye)
]

# 应用类,将功能封装在类中
class Application(object):
    def __init__(self):
        self.sockfd = socket()
        self.sockfd.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
        self.sockfd.bind(frame_address)

    def start(self):
        self.sockfd.listen(5)
        while True:
            connfd,addr = self.sockfd.accept()
            method = connfd.recv(128).decode()
            path_info = connfd.recv(1024).decode()
            print(method,path_info)
            self.handle(connfd,method,path_info)
    def handle(self,connfd,method,path_info):
        if method == 'GET':
            if path_info == '/' or path_info[-5:] =='.html':
                response = self.get_html(path_info)
            else:
                response = self.get_data(path_info)

        elif method == 'POST':
            pass 
        
        connfd.send(response.encode())
        connfd.close()
    
    def get_html(self,path_info):
        if path_info == '/':
            get_file = STATIC_DIR+'/index.html'
        else:
            get_file = STATIC_DIR+path_info
        try:
            fd = open(get_file)
        except IOError:
            response = '404'
        else:
            response = fd.read()
        finally:
            return response
    
    def get_data(self,path_info):
        for url,func in urls:
            if path_info == url:
                return func()
        return '404'


if __name__ == "__main__":
    app = Application()
    app.start() # 启动框架应用程序  



views.py
import time

def show_time():
    return time.ctime()

def say_hello():
    return 'Hello world'

def say_bye():
    return 'Good bye'



作业
  git 复习,操作github
  思考 WebFrame 编写

电子词典
功能说明
  1.用户可以登录和注册
    登录凭借用户名和密码登录
    注册要求用户必须填写用户名密码,其他内容自己拟定
    用户名要求不能重复
  2.用户信息需要长期保存,以满足随时登录
    要求使用数据库保存
  3.能够满足多个用户同时登录操作的需要
  4.项目分为客户端和服务端,客户端负责请求和展示数据,其余处理
    由服务端完成
  5.客户端启动即进入一级界面(界面print打印),一级界面功能
    登录  注册  退出
  6.用户登录后即进入二级界面(注册后是否处于登录状态自定),二级
    界面功能
    查单词  查看历史记录  注销
    查单词：可以循环输入单词,获取单词解释
      提示：每个单词占一行
           单词按照顺序排列
           单词和解释之间一定有空格
           可以选择直接操作文本,或者将单词本导入数据库然后
           从数据库查找
    查看历史记录：
      格式：name   word   time 
      可以显示登录人员查的所有单词或者最近10条自定
      注销：返回一级界面
  
1.确定技术点
  用什么并发?         fork多进程
  用什么套接字?       tcp套接字
  用什么数据库?       mysql
  文件处理还是数据库查询

2.建立数据库,设计表
  如需要将单词本导入数据库,则编程完成导入
  用户表：id name passwd
  历史记录： id name word time user_id
  单词表：id word interpret

3.结构设计,仿照ftp文件服务器
  服务器  创建套接字-->创建父子进程-->子进程等待处理客户端请求
         -->父进程继续等待连接下一个客户端
         具体请求调用具体函数处理

  客户端 创建套接字-->发起连接请求-->进入一级界面-->发起请求(
        登录,注册,退出)-->登录成功进入二级界面-->请求(查询
        历史记录)

4.完成通信的搭建
5.功能分析,根据分析完成功能代码
  注册
    客户端：
      1.输入注册信息
      2.将信息发送给服务器
      3.得到服务器反馈
    服务端：
      1.接收请求
      2.判断是否允许注册
      3.将结果反馈给客户端
      4.将注册信息插入数据库

  登录
    客户端：
      1.输入用户名密码
      2.将信息发送给服务器
      3.得到服务器反馈
      4.进入二级界面
    服务端：
      1.接收请求
      2.判断是否允许登录
      3.反馈结果
      
  查词
    客户端：
      1.发送请求 Q name word 
      2.接收返回结果
      3.##表示退出查词
    服务端：
      1.接收请求
      2.查找单词
      3.反馈结果
      4.插入历史记录
  历史记录


dict_server.py
'''
name:Tedu
modules:pymysql
This is a dict project for AID
'''

from socket import *
import pymysql 
import os 
import sys 
from threading import Thread
import time

# 定义需要的全局变量
DICT_TEXT = './dict.txt'
HOST = '0.0.0.0'
PORT = 8000
ADDR = (HOST,PORT)

# 处理僵尸进程
def zombie():
    os.wait()


# 网络连接
def main():
    # 创建数据库连接
    db = pymysql.connect('localhost','root','123456','dict')
    # 创建套接字
    s = socket()
    s.setsockopt(SOL_SOCKET,SO_REUSEADDR,1)
    s.bind(ADDR)
    s.listen(5)
    
    while True:
        try:
            c,addr = s.accept()
            print('Connect from',addr)
        except KeyboardInterrupt:
            s.close()
            sys.exit('服务器退出')
        except Exception as e:
            print(e)
            continue

        # 创建子进程
        pid = os.fork()
        if pid == 0:
            s.close()
            do_child(c,db) # 子进程函数
        else:
            c.close()
            t = Thread(target=zombie)
            t.setDaemon(True)
            t.start()
            continue

def do_child(c,db):
    while True:
        # 接收客户端请求
        data = c.recv(128).decode()
        print(c.getpeername(),':',data)
        if (not data) or data[0] == 'E':
            c.close()
            sys.exit()
        elif data[0] == 'R':
            do_register(c,db,data)
        elif data[0] == 'L':
            do_login(c,db,data)
        elif data[0] == 'Q':
            do_query(c,db,data)
        elif data[0] == 'H':
            do_hist(c,db,data)

def do_register(c,db,data):
    l = data.split(' ')
    name = l[1]
    passwd = l[2]
    cursor = db.cursor()
    sql = "select * from user where name='%s'"%name
    cursor.execute(sql)
    r = cursor.fetchone()

    if r != None:
        c.send(b'EXISTS')
        return

    # 插入用户
    sql = "insert into user (name,passwd) values('%s','%s')"%(name,passwd)
    try:
        cursor.execute(sql)
        db.commit()
        c.send(b'OK')
    except:
        db.rollback()
        c.send(b'FALL')

def do_login(c,db,data):
    l = data.split(' ')
    name = l[1]
    passwd = l[2]
    cursor = db.cursor()
    sql = "select * from user where name='%s' and passwd='%s'"%(name,passwd)
    # 查找用户
    cursor.execute(sql)
    r = cursor.fetchone()
    if r == None:
        c.send(b'FALL')
    else:
        c.send(b'OK')

def do_query(c,db,data):
    l = data.split(' ')
    name = l[1]
    word = l[2]
    cursor = db.cursor()

    def insert_history():
        tm = time.ctime()
        sql = "insert into hist (name,word,time) \
        values ('%s','%s','%s')"%(name,word,tm)
        try:
            cursor.execute(sql)
            db.commit()
        except:
            db.rollback()

    # 使用单词本查找
    try:
        f = open(DICT_TEXT)
    except:
        c.send(b'FALL')
        return
    for line in f:
        tmp = line.split(' ')[0]
        if tmp > word:
            c.send(b'FALL')
            f.close()
            return
        elif tmp == word:
            c.send(line.encode())
            f.close()
            insert_history()
            return
    c.send(b'FALL')
    f.close()

def do_hist(c,db,data):
    l = data.split(' ')
    name = l[1]
    cursor = db.cursor()
    sql = "select * from hist where name='%s'"%name
    cursor.execute(sql)
    r = cursor.fetchall()
    if not r:
        c.send(b'FALL')
        return
    else:
        c.send(b'OK')
        time.sleep(0.1)
    for i in r:
        msg="%s %s %s"%(i[1],i[2],i[3])
        c.send(msg.encode())
        time.sleep(0.1)
    c.send(b'##')


if __name__ == "__main__":
    main()



dict_client.py
#coding=utf-8
from socket import *
import sys 
import getpass

# 网络连接
def main():
    if len(sys.argv)<3:
        print('argv is error')
        return 
    HOST = sys.argv[1]
    PORT = int(sys.argv[2])

    s = socket()
    try:
        s.connect((HOST,PORT))
    except Exception as e:
        print(e)
        return 
    
    while True:
        print('''
        =============Welcome===========
        --   1.注册   2.登录   3.退出 --
        ===============================
        ''')
        try:
            cmd = int(input('输入选项：'))
        except Exception as e:
            print('命令错误')
            continue

        if cmd not in [1,2,3]:
            print('没有该选项')
        elif cmd == 1:
            do_register(s)
        elif cmd == 2:
            do_login(s)
        elif cmd == 3:
            s.send(b'E')
            sys.exit('谢谢使用')

def do_register(s):
    while True:
        name = input('User:')
        passwd = getpass.getpass()
        passwd1 = getpass.getpass('Again:')
        if (' ' in name) or (' ' in passwd):
            print('用户名或密码不能有空格')
            continue
        if passwd != passwd1:
            print('两次密码不一致')
            continue

        msg = 'R %s %s'%(name,passwd)
        # 发送请求
        s.send(msg.encode())
        # 等待回复
        data = s.recv(128).decode()
        if data == 'OK':
            print('注册成功')
        elif data == 'EXISTS':
            print('该用户已存在')
        else:
            print('注册失败')
        return 

def do_login(s):
    name = input("User:")
    passwd = getpass.getpass()
    msg = "L %s %s"%(name,passwd)
    s.send(msg.encode())
    data = s.recv(128).decode()
    if data == 'OK':
        print('登陆成功')
        login(s,name)
    else:
        print('登录失败')

def login(s,name):
    while True:
        print('''
        ============查询界面===========
        1.查词     2.历史记录     3.注销
        ==============================
        ''')
        try:
            cmd = int(input('输入选项：'))
        except Exception as e:
            print('命令错误')
            continue

        if cmd not in [1,2,3]:
            print('没有该选项')
        elif cmd == 1:
            do_query(s,name)
        elif cmd == 2:
            do_hist(s,name)
        elif cmd == 3:
            return

def do_query(s,name):
    while True:
        word = input("单词:")
        if not word:
            break
        msg = 'Q %s %s'%(name,word)
        s.send(msg.encode())
        data = s.recv(1024).decode()
        if data == 'FALL':
            print('没有找到该单词')
        else:
            print(data)
def do_hist(s,name):
    msg = 'H %s'%name
    s.send(msg.encode())
    data = s.recv(1024).decode()
    if data == 'OK':
        while True:
            data = s.recv(1024).decode()
            if data == '##':
                break
            print(data)
    else:
        print('没有历史记录')


if __name__ == "__main__":
    main()


dict_insert.py
import pymysql
import re 

f = open('dict.txt')
db = pymysql.connect('localhost','root','123456','dict')
cursor = db.cursor()
for line in f:
    try:
        pattern = r'([-a-zA-Z]+)\s+(.+)'
        obj = re.match(pattern,line)
        word = obj.group(1)
        interpret = obj.group(2)
    except:
        continue
    sql = "insert into words (word,interpret) values ('%s','%s')"%(word,interpret)
    try:
        cursor.execute(sql)
        db.commit()
    except:
        db.rollback()
f.close()



import getpass
passwd=getpass.getpass()
  功能：隐藏密码输入


pip的使用
  作用：
    安装python的标准第三方库
  安装：
    sudo apt-get install python3-pip
  常用命令：
    安装包：pip3 install [package]
    查看python包: pip3 list
    搜索python包: pip3 search [package]
    升级软件包：pip3 install --upgrade [package]
    查看软件包信息 pip3 show [package]
    卸载软件包： pip3 uninstall [package]
    导出软件环境：pip3 freeze > requirements.txt
    安装软件环境：pip3 install -r requirements.txt


第二阶段知识概要
  1.mysql 数据库的使用
  2.网络套接字编程
  3.多进程和多线程
  4.服务器通讯模型
  5.mongodb数据库使用
  6.正则表达式使用
  7.git使用

2018     11.1     星期四




正则表达式
  动机:
    1.文本处理已经成为计算机常见的工作之一
    2.对文本内容的搜索,定位,提取是逻辑比较复杂的工作
    3.为了快速方便的解决上述问题,产生了正则表达式技术
  定义:
    即文本的高级匹配模式,提供搜索,替换等功能,其本质
    是一系列由字符和特殊符号组成的字符串,这个字符串即
    正则表达式
  匹配原理:
    由普通字符和特殊符号构成,通过描述字符的重复,位置
    种类等行为达到匹配某一类字符串的目的
  目标：
    1.熟练掌握正则表达式符号
    2.读懂常见的正则表达式,编写基本的搜索提取功能正则
    3.能够熟练使用re模块操作正则表达式

正则表达式
  特点：
    1.方便文本处理
    2.支持语言众多
    3.使用灵活变化多样

python  ----->  re模块
  re.findall(pattern,string)
    功能：提取所有的正则匹配内容
    参数：pattern 正则表达式
         string  目标字符串
    返回值：列表,所有提取到的内容   
In [1]: import re
In [2]: s='Hi,This is Jame'
In [3]: re.findall('[A-Z]+\w*',s)
Out[3]: ['Hi', 'This', 'Jame']

元字符的使用
  1.普通字符
    元字符：a B c
    匹配规则：每个字符匹配对应的字符
    示例：
In [4]: re.findall('ab','abcdefg')
Out[4]: ['ab']

    python中正则表达式可以匹配汉字

  2.或
    元字符： |
    匹配规制：匹配 | 两侧任意一个正则表达式
    示例：
In [5]: re.findall('ab|ef','abcdefgh')
Out[5]: ['ab', 'ef']

In [6]: re.findall('ab|bc','abcdefgh')
Out[6]: ['ab']

In [7]: re.findall('ab | ef','abcdefgh')
Out[7]: []
  
  3.匹配单个字符
    元字符： .
    匹配规制：匹配除换行符以外的单个字符
    示例：
In [8]: re.findall('f..d','food foooa')
Out[8]: ['food']

In [3]: re.findall('你.','你好 sfq4')
Out[3]: ['你好']

  4.匹配字符串的开始位置
    元字符： ^
    匹配规制：匹配目标字符串的开始位置
    示例：
In [4]: re.findall('^Hello','Hello  abd')
Out[4]: ['Hello']

In [5]: re.findall('^Hello','as  Hello  abd')
Out[5]: []

  5.匹配字符串的结束位置
    元字符： $
    匹配规制：匹配目标字符串的结尾位置
    示例：
In [6]: re.findall('Hello$','as  Hello  abd')
Out[6]: []

In [7]: re.findall('Hello$','as  Hello')
Out[7]: ['Hello']

In [8]: re.findall('Hello$','as  Hello ')
Out[8]: []

  6.匹配重复
    元字符：*
    匹配规制：匹配前面的字符重复0次或者多次
    fo*  ----->  foooo   f
    示例：
In [9]: re.findall('fo*','sfo adfs foo    Hello ')
Out[9]: ['fo', 'f', 'foo']

  7.匹配重复
    元字符： +
    匹配规制：匹配前面的字符出现1次或多次
    示例：
In [10]: re.findall('fo+','sfo adfs foo    Hello ')
Out[10]: ['fo', 'foo']

  8.匹配重复
    元字符： ?
    匹配规制：匹配前面的字符出现0次或1次
    示例：
In [11]: re.findall('fo?','sfo adfs foo    Hello ')
Out[11]: ['fo', 'f', 'fo']

  9.匹配重复
    元字符：{n}
    匹配规制：匹配重复指定的次数
    示例：
In [12]: re.findall('fo{2}','sfo adfs foo foooo Hello ')
Out[12]: ['foo', 'foo']

In [13]: re.findall('fo{3}','sfo adfs foo foooo Hello ')
Out[13]: ['fooo']

  10.匹配重复
    元字符：{m,n}
    匹配规制：匹配前面的字符出现m~n次
    示例：
In [15]: re.findall('fo{2,4}','sfo adfsfoo fooooHfoooelfolo')
Out[15]: ['foo', 'foooo', 'fooo'] 

  11.匹配字符集
    元字符：[字符集]
    匹配规制：匹配字符集中任意一个字符
    示例：
    [abc123] ----> a b c 1 2 3
    [a-z] [A-Z] 小a到小z  大A到大Z    
    [0-9] [a-zA-Z]  0到9  小a到大Z
In [16]: re.findall('[a-zA-Z]{4}','THis is a tESt')
Out[16]: ['THis', 'tESt']

In [18]: re.findall('[a-z]*[A-Z]+','THis is A tESt')
Out[18]: ['TH', 'A', 'tES']

In [19]: re.findall('[0-9]','10+9=19')
Out[19]: ['1', '0', '9', '1', '9']

In [20]: re.findall('[0-9]+','10+9=19')
Out[20]: ['10', '9', '19']
  
  12.匹配字符集
    元字符：[^...]
    匹配规制：匹配除了字符集中的任意一个字符
    示例：
    [^abc] ---> 除了abc以外的任意一个
In [21]: re.findall('[^ ]+','THis is A Test')
Out[21]: ['THis', 'is', 'A', 'Test']

In [22]: re.findall('[^0-9]','10+9=19')
Out[22]: ['+', '=']

In [23]: re.findall('[^0-9]','10 + 9 = 19')
Out[23]: [' ', '+', ' ', ' ', '=', ' ']

  13.匹配任意(非)数字
    元字符：\d   \D 
    匹配规制: 
        \d  匹配任意数字字符    [0-9]
        \D  匹配任意非数字字符
    示例:
In [24]: re.findall('1\d{10}','13844668899')
Out[24]: ['13844668899']

In [25]: re.findall('1\d{9}','13844668899')
Out[25]: ['1384466889']

In [26]: re.findall('1\d{7}','13844668899')
Out[26]: ['13844668']

  14.匹配任意(非)普通字符
    元字符： \w     \W 
    匹配规制：
      \w  匹配任意普通字符 [0-9a-zA-Z]也能匹配汉字 
                  数字字母下划线
      \W  匹配任意非普通字符
    示例：
In [27]: re.findall('\w+','PORT#10035.Error 44%  下降_')
Out[27]: ['PORT', '10035', 'Error', '44', '下降_']

In [28]: re.findall('\W+','PORT#10035.Error 44%  下降')
Out[28]: ['#', '.', ' ', '%  ']

  15.匹配(非)空字符
    元字符： \s     \S
    匹配规制：
      \s 匹配任意空字符    [ \r\n\t\v\f]
      \S 匹配任意非空字符
    示例：
In [29]: re.findall('\w+\s+\w+','hello   world')
Out[29]: ['hello   world']

In [30]: re.findall('\w+\S+\w+','hello   world')
Out[30]: ['hello', 'world']
In [9]: re.findall('\S+','hello   world')
Out[9]: ['hello', 'world']


  16.匹配字符串位置
    元字符：\A    \Z
    匹配规制：
      \A 匹配字符串开头位置  
      \Z 匹配字符串结尾位置
    示例：
In [32]: re.findall('\A\d+-\d+\Z','1000-1500')
Out[32]: ['1000-1500']

In [33]: re.findall('\A\d+-\d+\Z','1000-1500REN')
Out[33]: []

In [34]: re.findall('\A\d+-\d+\Z','1000-  1500')
Out[34]: []
  绝对匹配：
    当正则表达式前有^ 后有$ 时,那么这个正则表达式
    一定是要匹配目标字符串的全部内容,否则就什么都不匹配

  17.匹配单词边界
    元字符：\b    \B
    匹配规则：
      \b 匹配单词边界位置  普通字符和非普通字符的交界  
      \B 匹配非单词边界位置
    示例：
In [35]: re.findall('\bis\b','this is a dog')
Out[35]: []

In [36]: re.findall(r'\bis\b','this is a dog')
Out[36]: ['is']

元字符总结
  匹配单个字符
    . [...] [^...] \d \D \w \W \s \S
  匹配重复
    + ? * {n} {m,n}
  匹配位置
    ^ $ \A \Z \b \B
  其他： |   ()   \

正则表达式转义
  正则表达式中特殊符号：
    . * ? ^ $ [] () | \
  在正则表达式中如果需要匹配特殊符号则需要加\作为转义
  示例：
    匹配 .   需要使用 \.

    python字符串     正则          目标字符串
      \\$\\d+       \$\d+           $10
  raw字符串：不对字符串内容进行转义处理
      '\\$\\d+'  ----->   r'\$\d+'

贪婪 和 非贪婪
  贪婪模式：
    正则表达式的重复匹配默认总是尽可能向后匹配更多的内容
       + ? *  {m,n}
  非贪婪模式(懒惰模式)：
    尽可能少的重复匹配内容
    贪婪  ---->  非贪婪 +? ??  *?  {m,n}?
    示例：
In [39]: re.findall('ab*','abbbbbbbbccc')
Out[39]: ['abbbbbbbb']

In [40]: re.findall('ab*?','abbbbbbbbccc')
Out[40]: ['a']

In [41]: re.findall('ab+?','abbbbbbbbccc')
Out[41]: ['ab']

In [42]: re.findall('ab+','abbbbbbbbccc')
Out[42]: ['abbbbbbbb']

正则表达式分组
  使用()可以为正则表达式建立内部分组,子组为正则表达式的
  一部,可以看做一个内部整体
  有子组的正则表达式仍然是整体去匹配内容,子组需要再整体
  能够匹配到内容的前提下发挥作用
  子组的作用：
    1.作为内部整体可以改变某些元字符行为
In [51]: re.search('(ab)+\d+','ababab1234').group()
Out[51]: 'ababab1234'

In [22]: re.search(r'\w+@\w+\.(cn|com)','Wangwc@tedu.com').group()
Out[22]: 'Wangwc@tedu.com'

In [23]: re.search(r'\w+@\w+\.(cn|com)','Wangwc@tedu.cn').group()
Out[23]: 'Wangwc@tedu.cn'

    2.子组在匹配到内容的情况下可以单独提取
In [52]: re.search(r'(https|http|ftp)://\S+','http://www.baidu.com').group()
Out[52]: 'http://www.baidu.com'

In [53]: re.search(r'(https|http|ftp)://\S+','http://www.baidu.com').group(1)
Out[53]: 'http'

In [54]: re.search(r'(https|http|ftp)://\S+','ftp://www.baidu.com').group(1)
Out[54]: 'ftp'

子组注意事项：
  1.一个正则表达式中可以有多个子组
  2.子组一般由外到内,由左到右记为第一第二
  3.子组不要重叠或者嵌套过多

捕获组和非捕获组(命名组和非命名组)
  格式： (?P<name>pattern)

In [56]: re.search(r'(?P<dog>ab)cd','abcdef').group()
Out[56]: 'abcd'

In [57]: re.search(r'(?P<dog>ab)cd','abcdef').group('dog')
Out[57]: 'ab'
  作用：名字可以表达一定的含义,也可以通过名字获取子组内容

正则表达式设计原则
  1.正确性,能够正确的匹配出目标字符串
  2.排他性,除了要匹配的内容,尽可能不会匹配到其他内容
  3.全面性,尽可能对目标字符串各种情况考虑全面,做到不遗漏

re模块
  regex=re.compile(pattern,flags=0)
    功能：生成正则表达式对象
    参数：pattern 正则表达式
         flags   功能标志位,丰富正则表达式的匹配功能
    返回值：正则表达式对象
  
  re.findall(pattern,string,flags=0)
    功能：从目标字符串提取所有正则匹配内容
    参数：pattern 正则表达式
         string  目标字串
         flags   功能标志
    返回值:返回匹配到的内容列表
          如果正则表达式有子组则只获取子组中的内容

  regex.findall(string,pos,endpos)
    功能：从目标字符串提取所有正则匹配内容
    参数：string  目标字串
         pos     截取目标字符串起始位置
         endpos  截取目标字符串终止位置
    返回值:返回匹配到的内容列表
          如果正则表达式有子组则只获取子组中的内容
示例：
import re 

pattern1 = r"\w+:\d+"
pattern2 = r"(\w+):(\d+)"
s = "zhang:1994 li:1993"

# re直接调用 
l1 = re.findall(pattern1,s)
l2 = re.findall(pattern2,s)
print(l1)  # ['zhang:1994', 'li:1993']
print(l2)  # [('zhang', '1994'), ('li', '1993')]

# compile对象调用
regex = re.compile(pattern1)
l3 = regex.findall(s)
print(l3)   # ['zhang:1994', 'li:1993']


  re.split(pattern,string,flags=0)
    功能：使用正则表达式匹配部分切割目标字符串
    参数：pattern 正则表达式
         string  目标字串
         flags   功能标志
    返回值： 列表  切割后的部分

In [28]: re.split(r'\s+','hello world')
Out[28]: ['hello', 'world']


  re.sub(pattern,replaceStr,string,max,flags=0)
    功能：使用字符串替换正则匹配内容
    参数：pattern    正则表达式
         replaceStr 替换的字符串
         string     目标字串
         max        最多替换几处,默认全部替换
    返回值： 返回替换后的字符串

In [30]: re.sub(r'\s+','##','hello  world')
Out[30]: 'hello##world'    


  re.subn(pattern,replaceStr,string,max,flags=0)
    功能：使用字符串替换正则匹配内容
    参数：pattern    正则表达式
         replaceStr 替换的字符串
         string     目标字串
         max        最多替换几处,默认全部替换
    返回值： 返回一个元组  替换后的字符串和替换了几处

In [31]: re.subn(r'\s+','##','hello  world')
Out[31]: ('hello##world', 1)

  
  re.finditer(pattern,string)
    功能：使用正则表达式匹配目标字符串
    参数：pattern 正则表达式
         string  目标字符串
    返回值： 迭代对象
In [57]: re.finditer(r'\s+','hello  world')
Out[57]: <callable_iterator at 0x7fe188f4cc50>

In [60]: next(re.finditer(r'\d+','hello 999  world'))
Out[60]: <_sre.SRE_Match object; span=(6, 9), match='999'>

In [2]: next(re.finditer(r'\d+','hello 999  world')).group()
Out[2]: '999'


  re.fullmatch(pattern,string,flags)
    功能：绝对匹配目标字符串
    参数：pattern  正则表达式
         string   目标字符串
    返回值： match 对象
In [53]: re.fullmatch(r'\S+','helloworld').group()
Out[53]: 'helloworld'


  re.match(pattern,string,flags)
    功能：匹配目标字符串的开头位置
    参数：pattern  正则表达式
         string   目标字符串
    返回值： match 对象

In [3]: re.match(r'[A-Z]\w+','Hello World')
Out[3]: <_sre.SRE_Match object; span=(0, 5), match='Hello'>

In [4]: re.match(r'[A-Z]\w+','Hello World').group()
Out[4]: 'Hello'


  re.search(pattern,string,flags)
    功能：匹配目标字符串第一处匹配内容
    参数：pattern  正则表达式
         string   目标字符串
    返回值： match 对象

In [9]: re.search(r'[A-Z]\w+','hello world Ni hao')
Out[9]: <_sre.SRE_Match object; span=(12, 14), match='Ni'>

In [10]: re.search(r'[A-Z]\w+','hello world Ni hao').group()
Out[10]: 'Ni'



regex 对象的属性
  pattern    代表的正则表达式
  flags      表示标志位常量值
  groups     表示有多少个子组
  groupindex 生成捕获组名和对应第几组的键值对 构成的字典



match object 方法和属性
  属性变量
    pos       匹配目标字符串的开始位置
    endpos    匹配目标字符串的结束位置
    re        正则表达式
    string    目标字符串
    lastgroup 最后一组的组名
    lastindex 最后一组是第几组

In [14]: re.compile(r'abcd').search('abcdefgh')
Out[14]: <_sre.SRE_Match object; span=(0, 4), match='abcd'>

In [15]: re.compile(r'abcd').search('abcdefgh').pos
Out[15]: 0

In [16]: re.compile(r'abcd').search('abcdefgh').endpos
Out[16]: 8

In [17]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).endpos
Out[17]: 7

In [18]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).re
Out[18]: re.compile(r'abcd', re.UNICODE)

In [19]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).string
Out[19]: 'abcdefgh'


  属性方法
    span()    匹配内容的起止位置
    start()   匹配内容的开始位置
    end()     匹配内容的结束位置
    group()
      功能：获取match对象对应的内容
      参数：默认为0 表示获取整个正则匹配到的内容
           如果为序列号或者子组名,则表示获取某个子组
           对应的内容 
      返回值：返回获取到的字符串
    groupdict() 获取捕获组字典,组名作为键,对应内容作为值
    groups()   获取每个子组匹配到的内容

In [21]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).span()
Out[21]: (0, 4)

In [22]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).start()
Out[22]: 0

In [23]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).end()
Out[23]: 4

In [24]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).group()
Out[24]: 'abcd'

In [25]: re.compile(r'abcd').search('abcdefgh',pos=0,endpos=7).groups()
Out[25]: ()


flags参数的使用
  使用函数：
    re.compile  re.findall  re.search  re.match
    re.finditer re.fullmatch re.sub  re.subn  re.split
  作用：辅助正则表达式,丰富匹配效果


  I==IGNORECASE  匹配时忽略字母大小写
  S==DOTALL      作用于元字符 . 使. 可以匹配换行符
  M==MULTILINE   作用于^$使其匹配每一行的开头结尾
  X==VERBOSE     可以给正则表达式添加注释
  同时使用多个标志位
    flags = re.I|re.X
In [27]: re.compile(r'hello',flags=re.I).search('Hello World').group()
Out[27]: 'Hello'



从文档日志中获取接口
import re 
import sys 

def get_address(port):
    f = open('1.txt')
    while True:
        data = ''
        for line in f:
            if line != '\n':
                data += line
            else:
                break
        # 说明已经读到文件结尾
        if not data:
            return 'Not found the port'
        # 匹配出首个单词
        try:
            PORT = re.match(r'\S+',data).group()
        except Exception as e:
            print(e)
            continue
        
        if port == PORT:
            pattern = r'address is (\w{4}\.\w{4}\.\w{4})'
            address = re.search(pattern,data).group(1)
            return address

if __name__ == "__main__":
    port = sys.argv[1]
    print(get_address(port))